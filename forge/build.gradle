plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

archivesBaseName = getArtifactId("forge")

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "hexmapping-common.mixins.json"
        mixinConfig "hexmapping.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    flatDir {
        dir 'libs'
    }
}

dependencies {
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))
    modCompileOnly(group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2') // for @Nonnull

    forge "net.minecraftforge:forge:${project.forgeVersion}"
    modApi "dev.architectury:architectury-forge:${project.architecturyVersion}"

    modImplementation("at.petra-k.hexcasting:hexcasting-forge-${project.minecraftVersion}:${project.hexcastingVersion}") { transitive = false }

    // // Hex Casting Dependencies
    modCompileOnly "at.petra-k.paucal:paucal-forge-$minecraftVersion:$paucalVersion"
    modRuntimeOnly "at.petra-k.paucal:paucal-forge-$minecraftVersion:$paucalVersion"
    modCompileOnly "vazkii.patchouli:Patchouli:$minecraftVersion-$patchouliVersion-FORGE-SNAPSHOT"
    modRuntimeOnly "vazkii.patchouli:Patchouli:$minecraftVersion-$patchouliVersion-FORGE-SNAPSHOT"

    runtimeOnly "thedarkcolour:kotlinforforge:$project.forgeKotlinVersion"

    modRuntimeOnly "top.theillusivec4.caelus:caelus-forge:$caelusVersion"

    modImplementation("com.samsthenerd.inline:inline-forge:$minecraftVersion-$inlineVersion") { transitive = false }

    // needed for inline to run
    runtimeOnly "me.shedaniel.cloth:cloth-config-forge:$clothConfigVersion"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // MoreIotas
    modImplementation "${modID}:moreiotas-forge:1.20.1-0.1.0-5"

    modCompileOnly "maven.modrinth:dynmap:RtI5TFAi"
}

processResources {
    from(rootProject.file("common/src/main/resources")) {
        include("data/*/patchouli_books/")
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archivesBaseName + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = getLatestChangelog()
    type = STABLE
    modLoaders.add("forge")

    version = project.version + "-forge"
    displayName = "HexMapping $project.version [Forge]"

    curseforge {
        accessToken = project.curseforgeApiToken
        projectId = project.curseforgeId
        minecraftVersions.add(minecraftVersion)

        requires("architectury-api", "kotlin-for-forge", "hexcasting", "moreiotas")
        optional("bluemap", "dynmapforge")
    }

    modrinth {
        accessToken = project.modrinthApiToken
        projectId = project.modrinthId
        minecraftVersions.add(minecraftVersion)

        requires("architectury-api")
        requires("kotlin-for-forge")
        requires("hex-casting")
        requires("moreiotas")

        optional("hexical")

        optional("bluemap")
        optional("dynmap")
        optional("pl3xmap")
        optional("squaremap")
    }
}
